{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7174ca0-f825-4e40-a931-f59fce576280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: google-play-scraper in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (1.2.7)\n",
      "Scraped 1000 reviews and saved to 'calm_reviews.csv'.\n"
     ]
    }
   ],
   "source": [
    "# Install the library first (only once needed)\n",
    "!pip install google-play-scraper\n",
    "\n",
    "# Now the code\n",
    "from google_play_scraper import Sort, reviews\n",
    "import pandas as pd\n",
    "\n",
    "# Target app\n",
    "app_package_name = 'com.calm.android'  # Calm app's package name on Google Play\n",
    "\n",
    "# Scrape reviews\n",
    "result, _ = reviews(\n",
    "    app_package_name,\n",
    "    lang='en',         # Language\n",
    "    country='us',      # Country\n",
    "    sort=Sort.NEWEST,  # Sort by newest first\n",
    "    count=1000,        # Number of reviews you want to scrape\n",
    "    filter_score_with=None  # Get all reviews, not just positive/negative\n",
    ")\n",
    "\n",
    "# Convert to DataFrame\n",
    "df = pd.DataFrame(result)\n",
    "\n",
    "# Select only important columns\n",
    "df = df[['reviewId', 'userName', 'content', 'score', 'thumbsUpCount', 'reviewCreatedVersion', 'at']]\n",
    "\n",
    "# Rename for better clarity\n",
    "df.columns = ['Review ID', 'User Name', 'Review Content', 'Rating', 'Helpful Count', 'App Version', 'Review Date']\n",
    "\n",
    "# Save to CSV\n",
    "df.to_csv('calm_reviews.csv', index=False)\n",
    "\n",
    "print(f\"Scraped {len(df)} reviews and saved to 'calm_reviews.csv'.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6cb7e7f8-600a-4571-b6a4-cc3cca345825",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (4.46.1)\n",
      "Requirement already satisfied: filelock in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (3.17.0)\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (0.29.1)\n",
      "Requirement already satisfied: numpy>=1.17 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (1.26.4)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (23.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (6.0.2)\n",
      "Requirement already satisfied: regex!=2019.12.17 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (2024.11.6)\n",
      "Requirement already satisfied: requests in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (2.32.3)\n",
      "Requirement already satisfied: safetensors>=0.4.1 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (0.5.3)\n",
      "Requirement already satisfied: tokenizers<0.21,>=0.20 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (0.20.3)\n",
      "Requirement already satisfied: tqdm>=4.27 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from transformers) (4.67.1)\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.10.0)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\n",
      "Requirement already satisfied: colorama in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from tqdm>=4.27->transformers) (0.4.6)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from requests->transformers) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from requests->transformers) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from requests->transformers) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\keert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from requests->transformers) (2025.1.31)\n",
      "✅ Sentiment Analysis with Neutral handling complete!\n",
      "✅ File saved as 'calm_reviews_with_true_sentiment_and_neutral.csv'.\n"
     ]
    }
   ],
   "source": [
    "# Install transformers if not installed\n",
    "!pip install transformers\n",
    "\n",
    "# Import libraries\n",
    "import pandas as pd\n",
    "from transformers import pipeline\n",
    "\n",
    "# Load Calm Reviews\n",
    "df = pd.read_csv('calm_reviews.csv')\n",
    "\n",
    "# Load sentiment analysis pipeline\n",
    "sentiment_pipeline = pipeline(\n",
    "    \"sentiment-analysis\",\n",
    "    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\n",
    ")\n",
    "\n",
    "# Predict sentiments\n",
    "predictions = sentiment_pipeline(list(df['Review Content']), batch_size=16)\n",
    "\n",
    "# Add raw model predictions\n",
    "df['Predicted Sentiment Label'] = [pred['label'] for pred in predictions]\n",
    "df['Predicted Sentiment Score'] = [pred['score'] for pred in predictions]\n",
    "\n",
    "# Define a function to map confidence scores to Neutral if low confidence\n",
    "def classify_with_neutral(label, score, threshold=0.7):\n",
    "    if score >= threshold:\n",
    "        return label\n",
    "    else:\n",
    "        return 'Neutral'\n",
    "\n",
    "# Apply the function\n",
    "df['Final Sentiment'] = [\n",
    "    classify_with_neutral(label, score)\n",
    "    for label, score in zip(df['Predicted Sentiment Label'], df['Predicted Sentiment Score'])\n",
    "]\n",
    "\n",
    "# Save the updated DataFrame\n",
    "df.to_csv('calm_reviews_with_true_sentiment_and_neutral.csv', index=False)\n",
    "\n",
    "print(\"✅ Sentiment Analysis with Neutral handling complete!\")\n",
    "print(\"✅ File saved as 'calm_reviews_with_true_sentiment_and_neutral.csv'.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c5986e7d-b283-4f25-a580-f9257b08d3b8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📂 No intermediate file found. Starting fresh...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   1%|          | 10/1000 [00:14<20:46,  1.26s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 10 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   2%|▏         | 20/1000 [00:27<20:37,  1.26s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 20 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   3%|▎         | 30/1000 [00:39<20:17,  1.26s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 30 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   4%|▍         | 40/1000 [01:02<37:47,  2.36s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 40 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   5%|▌         | 50/1000 [01:27<39:23,  2.49s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 50 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   6%|▌         | 60/1000 [01:51<37:51,  2.42s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 60 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   7%|▋         | 70/1000 [02:31<34:26,  2.22s/review]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 70 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   8%|▊         | 80/1000 [02:45<21:31,  1.40s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 80 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:   9%|▉         | 90/1000 [02:59<20:50,  1.37s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 90 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  10%|█         | 100/1000 [03:19<34:28,  2.30s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 100 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  11%|█         | 110/1000 [03:44<36:21,  2.45s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 110 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  12%|█▏        | 120/1000 [04:09<36:41,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 120 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  13%|█▎        | 130/1000 [04:34<36:13,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 130 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  14%|█▍        | 140/1000 [04:59<35:25,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 140 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  15%|█▌        | 150/1000 [05:23<34:33,  2.44s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 150 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  16%|█▌        | 160/1000 [05:48<34:35,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 160 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  17%|█▋        | 170/1000 [06:12<34:05,  2.46s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 170 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  18%|█▊        | 180/1000 [06:36<32:36,  2.39s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 180 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  19%|█▉        | 190/1000 [07:01<32:31,  2.41s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 190 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  20%|██        | 200/1000 [07:25<33:19,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 200 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  21%|██        | 210/1000 [07:50<32:26,  2.46s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 210 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  22%|██▏       | 220/1000 [08:15<32:06,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 220 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  23%|██▎       | 230/1000 [08:40<31:45,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 230 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  24%|██▍       | 240/1000 [09:05<31:36,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 240 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  25%|██▌       | 250/1000 [09:30<30:55,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 250 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  26%|██▌       | 260/1000 [09:55<31:20,  2.54s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 260 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  27%|██▋       | 270/1000 [10:21<31:41,  2.60s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 270 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  28%|██▊       | 280/1000 [10:46<30:00,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 280 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  29%|██▉       | 290/1000 [11:11<29:34,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 290 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  30%|███       | 300/1000 [11:36<30:02,  2.58s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 300 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  31%|███       | 310/1000 [12:01<27:39,  2.40s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 310 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  32%|███▏      | 320/1000 [12:26<28:43,  2.54s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 320 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  33%|███▎      | 330/1000 [12:51<27:38,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 330 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  34%|███▍      | 340/1000 [13:16<26:38,  2.42s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 340 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  35%|███▌      | 350/1000 [13:40<26:28,  2.44s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 350 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  36%|███▌      | 360/1000 [14:05<26:10,  2.45s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 360 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  37%|███▋      | 370/1000 [14:29<26:20,  2.51s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 370 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  38%|███▊      | 380/1000 [14:54<26:14,  2.54s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 380 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  39%|███▉      | 390/1000 [15:19<25:33,  2.51s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 390 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  40%|████      | 400/1000 [15:44<25:16,  2.53s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 400 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  41%|████      | 410/1000 [16:09<24:36,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 410 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  42%|████▏     | 420/1000 [16:34<23:53,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 420 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  43%|████▎     | 430/1000 [16:58<22:58,  2.42s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 430 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  44%|████▍     | 440/1000 [17:23<22:24,  2.40s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 440 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  45%|████▌     | 450/1000 [17:49<23:33,  2.57s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 450 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  46%|████▌     | 460/1000 [18:14<21:47,  2.42s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 460 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  47%|████▋     | 470/1000 [18:39<22:22,  2.53s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 470 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  48%|████▊     | 480/1000 [19:04<21:38,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 480 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  49%|████▉     | 490/1000 [19:30<21:26,  2.52s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 490 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  50%|█████     | 500/1000 [19:55<21:07,  2.54s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 500 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  51%|█████     | 507/1000 [29:28<23:09:56, 169.16s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⚠️ Summarization failed for review 507: Connection error.\n",
      "🕑 Waiting extra 30 seconds to avoid further failures...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  51%|█████     | 510/1000 [30:03<8:37:45, 63.40s/review]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 510 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  52%|█████▏    | 520/1000 [30:17<26:06,  3.26s/review]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 520 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  52%|█████▎    | 525/1000 [30:31<27:27,  3.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⚠️ Summarization failed for review 525: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-8b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.729s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "🕑 Waiting extra 30 seconds to avoid further failures...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  53%|█████▎    | 530/1000 [31:09<31:10,  3.98s/review]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 530 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  54%|█████▍    | 540/1000 [31:27<13:57,  1.82s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 540 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  55%|█████▌    | 550/1000 [31:41<09:48,  1.31s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 550 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  56%|█████▌    | 560/1000 [31:56<12:26,  1.70s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 560 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  57%|█████▋    | 570/1000 [32:23<17:35,  2.45s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 570 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  58%|█████▊    | 580/1000 [32:48<17:25,  2.49s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 580 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  59%|█████▉    | 590/1000 [33:12<16:26,  2.41s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 590 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  60%|██████    | 600/1000 [33:36<16:22,  2.46s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 600 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  61%|██████    | 610/1000 [34:01<16:22,  2.52s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 610 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  62%|██████▏   | 620/1000 [34:26<15:37,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 620 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  63%|██████▎   | 630/1000 [34:50<14:58,  2.43s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 630 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  64%|██████▍   | 640/1000 [35:14<15:13,  2.54s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 640 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  65%|██████▌   | 650/1000 [35:40<14:45,  2.53s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 650 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  66%|██████▌   | 660/1000 [36:05<14:51,  2.62s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 660 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  67%|██████▋   | 670/1000 [36:30<13:08,  2.39s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 670 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  68%|██████▊   | 676/1000 [36:45<13:47,  2.55s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⚠️ Summarization failed for review 676: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-8b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.823s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "🕑 Waiting extra 30 seconds to avoid further failures...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  68%|██████▊   | 680/1000 [37:24<26:51,  5.04s/review]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 680 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  69%|██████▉   | 690/1000 [37:37<07:25,  1.44s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 690 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  70%|███████   | 700/1000 [37:59<11:54,  2.38s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 700 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  71%|███████   | 710/1000 [38:24<11:44,  2.43s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 710 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  72%|███████▏  | 720/1000 [38:48<11:28,  2.46s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 720 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  73%|███████▎  | 730/1000 [39:13<11:28,  2.55s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 730 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  74%|███████▍  | 740/1000 [39:38<10:33,  2.44s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 740 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  75%|███████▌  | 750/1000 [40:03<10:35,  2.54s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 750 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  76%|███████▌  | 760/1000 [40:39<07:25,  1.86s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 760 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  77%|███████▋  | 770/1000 [41:01<09:21,  2.44s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 770 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  78%|███████▊  | 780/1000 [41:25<08:58,  2.45s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 780 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  79%|███████▉  | 790/1000 [41:50<08:40,  2.48s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 790 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  80%|████████  | 800/1000 [42:16<08:19,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 800 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  81%|████████  | 810/1000 [42:40<07:47,  2.46s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 810 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  82%|████████▏ | 820/1000 [43:05<07:23,  2.47s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 820 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  83%|████████▎ | 830/1000 [43:30<07:07,  2.51s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 830 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  84%|████████▍ | 840/1000 [43:55<06:40,  2.51s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 840 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  85%|████████▌ | 850/1000 [44:19<06:11,  2.48s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 850 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  86%|████████▌ | 860/1000 [45:02<03:56,  1.69s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 860 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  87%|████████▋ | 870/1000 [45:20<04:50,  2.24s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 870 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  88%|████████▊ | 880/1000 [45:44<04:48,  2.40s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 880 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  89%|████████▉ | 890/1000 [46:09<04:35,  2.50s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 890 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  90%|█████████ | 900/1000 [46:33<04:05,  2.46s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 900 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  91%|█████████ | 910/1000 [46:58<03:36,  2.40s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 910 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  92%|█████████▏| 920/1000 [47:22<03:14,  2.43s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 920 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  93%|█████████▎| 930/1000 [47:47<02:56,  2.52s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 930 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  94%|█████████▎| 935/1000 [48:00<02:46,  2.57s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⚠️ Summarization failed for review 935: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-8b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.454s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "🕑 Waiting extra 30 seconds to avoid further failures...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  94%|█████████▍| 940/1000 [48:48<05:17,  5.29s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 940 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  95%|█████████▌| 950/1000 [49:13<02:08,  2.56s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 950 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  96%|█████████▌| 960/1000 [49:38<01:40,  2.52s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 960 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  97%|█████████▋| 970/1000 [50:05<01:20,  2.68s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 970 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  98%|█████████▊| 980/1000 [50:35<01:13,  3.67s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 980 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews:  99%|█████████▉| 990/1000 [51:07<00:26,  2.64s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 990 reviews.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Summarizing Reviews: 100%|██████████| 1000/1000 [51:34<00:00,  3.09s/review]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💾 Auto-saved after 1000 reviews.\n",
      "✅ Summarization complete. Final results saved to summarized_calm_reviews_groq.csv.\n",
      "🧹 Cleaning up intermediate file...\n",
      "\n",
      "🏁 SUMMARY REPORT:\n",
      "Total reviews processed: 1000\n",
      "Successful summarizations: 996\n",
      "Failed summarizations: 4\n",
      "\n",
      "📄 Summary report saved to 'summary_report.txt'.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# --- Install packages if not installed ---\n",
    "# pip install openai pandas tqdm\n",
    "\n",
    "import pandas as pd\n",
    "import openai\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "import time\n",
    "from datetime import datetime\n",
    "\n",
    "# --- Step 1: Configure Groq API ---\n",
    "openai.api_key = \"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\"  # <<< Replace with your Groq API Key\n",
    "openai.base_url = \"https://api.groq.com/openai/v1/\"  # ✅ Important: Trailing slash /\n",
    "\n",
    "# --- Choose the Model ---\n",
    "model_name = \"llama3-8b-8192\"  # Or you can use \"mixtral-8x7b-32768\" for faster response\n",
    "\n",
    "# --- Step 2: Load Your CSV File ---\n",
    "input_file = \"calm_reviews_with_true_sentiment_and_neutral.csv\"\n",
    "df_full = pd.read_csv(input_file)\n",
    "\n",
    "# Check if 'Review Content' column exists\n",
    "if 'Review Content' not in df_full.columns:\n",
    "    raise ValueError(\"The CSV file must contain a column named 'Review Content'.\")\n",
    "\n",
    "# --- Step 3: Setup Log Files ---\n",
    "success_log_file = \"success_log.txt\"\n",
    "error_log_file = \"error_log.txt\"\n",
    "\n",
    "def write_log(file_path, message):\n",
    "    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
    "    with open(file_path, \"a\", encoding=\"utf-8\") as f:\n",
    "        f.write(f\"[{timestamp}] {message}\\n\")\n",
    "\n",
    "# --- Step 4: Check for Intermediate Progress ---\n",
    "intermediate_file = \"intermediate_progress_calm_reviews.csv\"\n",
    "if os.path.exists(intermediate_file):\n",
    "    print(f\"📂 Found intermediate file. Resuming from {intermediate_file}...\")\n",
    "    df_intermediate = pd.read_csv(intermediate_file)\n",
    "    completed_reviews = len(df_intermediate)\n",
    "    summarized_reviews = df_intermediate['Summary'].tolist()\n",
    "else:\n",
    "    print(\"📂 No intermediate file found. Starting fresh...\")\n",
    "    completed_reviews = 0\n",
    "    summarized_reviews = []\n",
    "\n",
    "# --- Step 5: Initialize Counters ---\n",
    "success_count = 0\n",
    "failure_count = 0\n",
    "\n",
    "# --- Step 6: Summarize Remaining Reviews (with logging and auto-save) ---\n",
    "for idx in tqdm(range(completed_reviews, len(df_full)), desc=\"Summarizing Reviews\", unit=\"review\"):\n",
    "    review = df_full.loc[idx, 'Review Content']\n",
    "\n",
    "    if pd.isna(review) or review.strip() == \"\":\n",
    "        summarized_reviews.append(\"\")\n",
    "        write_log(success_log_file, f\"✅ Review {idx+1}: Empty review skipped.\")\n",
    "        success_count += 1\n",
    "        continue\n",
    "\n",
    "    try:\n",
    "        response = openai.chat.completions.create(\n",
    "            model=model_name,\n",
    "            messages=[\n",
    "                {\"role\": \"system\", \"content\": \"You are a professional summarizer. Keep tone natural and match the review's sentiment (positive, neutral, negative).\"},\n",
    "                {\"role\": \"user\", \"content\": f\"Summarize the following Calm app review in 1–2 short sentences, accurately reflecting the user's real experience and emotional tone. Avoid exaggeration. Be realistic and concise.\\n\\nReview:\\n{review.strip()}\"}\n",
    "            ],\n",
    "            temperature=0.2,\n",
    "            max_tokens=150\n",
    "        )\n",
    "        summary_text = response.choices[0].message.content.strip()\n",
    "        summarized_reviews.append(summary_text)\n",
    "        write_log(success_log_file, f\"✅ Review {idx+1}: Successfully summarized.\")\n",
    "        success_count += 1\n",
    "        time.sleep(1)  # Sleep a little to avoid hammering the API\n",
    "\n",
    "    except Exception as e:\n",
    "        error_message = str(e)\n",
    "        summarized_reviews.append(\"Summarization failed.\")\n",
    "        write_log(error_log_file, f\"❌ Review {idx+1}: Summarization failed. Error: {error_message}\")\n",
    "        print(f\"⚠️ Summarization failed for review {idx}: {error_message}\")\n",
    "        print(\"🕑 Waiting extra 30 seconds to avoid further failures...\")\n",
    "        failure_count += 1\n",
    "        time.sleep(30)  # Sleep longer after failure\n",
    "\n",
    "    # --- Save progress after every 10 reviews ---\n",
    "    if (idx + 1) % 10 == 0 or (idx + 1) == len(df_full):\n",
    "        temp_df = df_full.iloc[:len(summarized_reviews)].copy()\n",
    "        temp_df['Summary'] = summarized_reviews  # ✅ Column renamed here\n",
    "        temp_df.to_csv(intermediate_file, index=False)\n",
    "        print(f\"💾 Auto-saved after {idx+1} reviews.\")\n",
    "\n",
    "# --- Step 7: Final Save ---\n",
    "df_full['Summary'] = summarized_reviews  # ✅ Column renamed here\n",
    "final_output = \"summarized_calm_reviews_groq.csv\"\n",
    "df_full.to_csv(final_output, index=False)\n",
    "\n",
    "print(f\"✅ Summarization complete. Final results saved to {final_output}.\")\n",
    "\n",
    "# --- Step 8: Cleanup\n",
    "if os.path.exists(intermediate_file):\n",
    "    print(f\"🧹 Cleaning up intermediate file...\")\n",
    "    os.remove(intermediate_file)\n",
    "\n",
    "# --- Step 9: Write Final Summary Report\n",
    "summary_report = f\"\"\"\n",
    "🏁 SUMMARY REPORT:\n",
    "Total reviews processed: {len(df_full)}\n",
    "Successful summarizations: {success_count}\n",
    "Failed summarizations: {failure_count}\n",
    "\"\"\"\n",
    "\n",
    "print(summary_report)\n",
    "\n",
    "# Save summary to a file\n",
    "with open(\"summary_report.txt\", \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(summary_report.strip())\n",
    "\n",
    "print(\"📄 Summary report saved to 'summary_report.txt'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4bbb8891-7406-4ff6-a947-3cdda561203b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\keert\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 128202 (\\N{BAR CHART}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --- Step 10: Generate Pie Chart for Success vs Failure\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Data for pie chart\n",
    "labels = ['Successful Summaries', 'Failed Summaries']\n",
    "sizes = [success_count, failure_count]\n",
    "colors = ['#4CAF50', '#F44336']  # Green for success, Red for failure\n",
    "explode = (0.05, 0.1)  # \"explode\" the slices a little for visibility\n",
    "\n",
    "# Plot\n",
    "fig, ax = plt.subplots()\n",
    "ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n",
    "       autopct='%1.1f%%', shadow=True, startangle=140)\n",
    "ax.axis('equal')  # Equal aspect ratio ensures pie is drawn as a circle\n",
    "\n",
    "plt.title('📊 Summary of Calm App Review Summarizations')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "904d397c-cb1c-4ae4-a210-8226272101bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --- Step 11: Generate Pie Chart for Empty vs Non-Empty Reviews\n",
    "\n",
    "# Count empty vs non-empty reviews\n",
    "empty_reviews = df_full['Review Content'].isna().sum() + (df_full['Review Content'].str.strip() == \"\").sum()\n",
    "non_empty_reviews = len(df_full) - empty_reviews\n",
    "\n",
    "# Data for pie chart\n",
    "labels_empty = ['Non-Empty Reviews', 'Empty Reviews']\n",
    "sizes_empty = [non_empty_reviews, empty_reviews]\n",
    "colors_empty = ['#2196F3', '#FFC107']  # Blue for non-empty, Yellow for empty\n",
    "explode_empty = (0.05, 0.1)\n",
    "\n",
    "# Plot\n",
    "fig, ax = plt.subplots()\n",
    "ax.pie(sizes_empty, explode=explode_empty, labels=labels_empty, colors=colors_empty,\n",
    "       autopct='%1.1f%%', shadow=True, startangle=140)\n",
    "ax.axis('equal')  # Equal aspect ratio ensures pie is drawn as a circle\n",
    "\n",
    "plt.title('📊 Data Quality: Non-Empty vs Empty Reviews')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ab6674f-c868-42e8-9924-eadc7b3f60e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error summarizing review at index 728: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.912s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "Error summarizing review at index 787: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.765s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "Error summarizing review at index 832: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.875s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "Error summarizing review at index 876: Error code: 429 - {'error': {'message': 'Rate limit reached for model `llama3-70b-8192` in organization `org_01jsttgpype479s787xtfwzhst` service tier `on_demand` on requests per minute (RPM): Limit 30, Used 30, Requested 1. Please try again in 1.995s. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'requests', 'code': 'rate_limit_exceeded'}}\n",
      "✅ Business Insights extracted and saved to 'calm_reviews_with_likes_dislikes.csv'\n"
     ]
    }
   ],
   "source": [
    "# Install required libraries if not installed\n",
    "# Uncomment these lines if you don't have these installed\n",
    "# !pip install pandas\n",
    "# !pip install groq\n",
    "\n",
    "import pandas as pd\n",
    "import groq\n",
    "\n",
    "# Setup Groq client\n",
    "groq_client = groq.Groq(api_key=\"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\")  \n",
    "\n",
    "# Load reviews CSV\n",
    "df = pd.read_csv('calm_reviews.csv')  # Adjust filename if different\n",
    "\n",
    "# Check if 'Review Content' column exists\n",
    "if 'Review Content' not in df.columns:\n",
    "    raise ValueError(\"CSV must have a column named 'Review Content'!\")\n",
    "\n",
    "# Create empty columns to store business insights\n",
    "df['Likes'] = \"\"\n",
    "df['Dislikes'] = \"\"\n",
    "\n",
    "# Process each review\n",
    "for idx, review in df['Review Content'].items():\n",
    "    if pd.isna(review) or review.strip() == \"\":\n",
    "        df.at[idx, 'Likes'] = \"No review provided.\"\n",
    "        df.at[idx, 'Dislikes'] = \"No review provided.\"\n",
    "        continue\n",
    "\n",
    "    prompt = f\"\"\"\n",
    "You are a business analyst.\n",
    "\n",
    "Summarize the following Calm App user review into two very short bullet points:\n",
    "- What the user liked (under 10 words)\n",
    "- What the user disliked (under 10 words)\n",
    "\n",
    "User Review:\n",
    "{review}\n",
    "\n",
    "Return the two bullet points clearly, separated by a line break.\n",
    "\"\"\"\n",
    "\n",
    "    try:\n",
    "        response = groq_client.chat.completions.create(\n",
    "            model=\"llama3-70b-8192\",\n",
    "            messages=[\n",
    "                {\"role\": \"user\", \"content\": prompt}\n",
    "            ]\n",
    "        )\n",
    "        \n",
    "        summary_text = response.choices[0].message.content.strip()\n",
    "\n",
    "        # Split into Likes and Dislikes\n",
    "        if \"Dislikes\" in summary_text:\n",
    "            like_line, dislike_line = summary_text.split(\"\\n\", 1)\n",
    "            df.at[idx, 'Likes'] = like_line.replace(\"Likes:\", \"\").strip(\" -👍👎\")\n",
    "            df.at[idx, 'Dislikes'] = dislike_line.replace(\"Dislikes:\", \"\").strip(\" -👍👎\")\n",
    "        else:\n",
    "            df.at[idx, 'Likes'] = summary_text\n",
    "            df.at[idx, 'Dislikes'] = \"N/A\"\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error summarizing review at index {idx}: {e}\")\n",
    "        df.at[idx, 'Likes'] = \"Error\"\n",
    "        df.at[idx, 'Dislikes'] = \"Error\"\n",
    "\n",
    "# Save the final DataFrame\n",
    "df.to_csv('calm_reviews_with_likes_dislikes.csv', index=False)\n",
    "\n",
    "print(\"✅ Business Insights extracted and saved to 'calm_reviews_with_likes_dislikes.csv'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e2d03933-33f8-4011-af33-db3f53b344be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review ID</th>\n",
       "      <th>User Name</th>\n",
       "      <th>Review Content</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Helpful Count</th>\n",
       "      <th>App Version</th>\n",
       "      <th>Review Date</th>\n",
       "      <th>Predicted Sentiment Label</th>\n",
       "      <th>Predicted Sentiment Score</th>\n",
       "      <th>Final Sentiment</th>\n",
       "      <th>Summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>804ca397-e04a-4214-be56-20e4683ca3a8</td>\n",
       "      <td>Marina Michaels</td>\n",
       "      <td>Perfect sleep solution. I went from being able...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6.68.1</td>\n",
       "      <td>2025-04-26 13:24:27</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>0.987137</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>Here is a 1-2 sentence summary of the review:\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a14aee39-cbe9-4d27-bf1c-3eb6c5e56182</td>\n",
       "      <td>Sunny L.</td>\n",
       "      <td>cancelled subscription, got charged next month.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6.67</td>\n",
       "      <td>2025-04-26 10:44:59</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>0.998231</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>The user had a frustrating experience with the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>f06a07d0-54db-4e04-b4e3-995013715237</td>\n",
       "      <td>D. Colbert</td>\n",
       "      <td>PURPOSELY FALSE &amp; MISLEADING ADVERTISING: FAIL...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2025-04-26 05:31:27</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>0.999757</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>Here is a 1-2 sentence summary of the review:\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a4e6f76e-d338-4917-a9c6-2021d88edfca</td>\n",
       "      <td>Rob Fann</td>\n",
       "      <td>The only way one can use this is through a pai...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6.68.1</td>\n",
       "      <td>2025-04-25 23:08:50</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>0.999585</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>Here is a summary of the review in 1-2 short s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>75c61fc0-0cf2-4b9c-8783-d7a045f8a594</td>\n",
       "      <td>Ann</td>\n",
       "      <td>waiting to try it tonite</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>6.44.3</td>\n",
       "      <td>2025-04-25 22:39:18</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>0.995624</td>\n",
       "      <td>NEGATIVE</td>\n",
       "      <td>The user is looking forward to trying the Calm...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Review ID        User Name  \\\n",
       "0  804ca397-e04a-4214-be56-20e4683ca3a8  Marina Michaels   \n",
       "1  a14aee39-cbe9-4d27-bf1c-3eb6c5e56182         Sunny L.   \n",
       "2  f06a07d0-54db-4e04-b4e3-995013715237       D. Colbert   \n",
       "3  a4e6f76e-d338-4917-a9c6-2021d88edfca         Rob Fann   \n",
       "4  75c61fc0-0cf2-4b9c-8783-d7a045f8a594              Ann   \n",
       "\n",
       "                                      Review Content  Rating  Helpful Count  \\\n",
       "0  Perfect sleep solution. I went from being able...       5              0   \n",
       "1    cancelled subscription, got charged next month.       1              0   \n",
       "2  PURPOSELY FALSE & MISLEADING ADVERTISING: FAIL...       1              1   \n",
       "3  The only way one can use this is through a pai...       1              0   \n",
       "4                           waiting to try it tonite       4              0   \n",
       "\n",
       "  App Version         Review Date Predicted Sentiment Label  \\\n",
       "0      6.68.1 2025-04-26 13:24:27                  NEGATIVE   \n",
       "1        6.67 2025-04-26 10:44:59                  NEGATIVE   \n",
       "2         NaN 2025-04-26 05:31:27                  NEGATIVE   \n",
       "3      6.68.1 2025-04-25 23:08:50                  NEGATIVE   \n",
       "4      6.44.3 2025-04-25 22:39:18                  NEGATIVE   \n",
       "\n",
       "   Predicted Sentiment Score Final Sentiment  \\\n",
       "0                   0.987137        NEGATIVE   \n",
       "1                   0.998231        NEGATIVE   \n",
       "2                   0.999757        NEGATIVE   \n",
       "3                   0.999585        NEGATIVE   \n",
       "4                   0.995624        NEGATIVE   \n",
       "\n",
       "                                             Summary  \n",
       "0  Here is a 1-2 sentence summary of the review:\\...  \n",
       "1  The user had a frustrating experience with the...  \n",
       "2  Here is a 1-2 sentence summary of the review:\\...  \n",
       "3  Here is a summary of the review in 1-2 short s...  \n",
       "4  The user is looking forward to trying the Calm...  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your Excel file\n",
    "df = pd.read_excel('summarized_calm_reviews_groq.xlsx')\n",
    "\n",
    "# Show first few rows\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e4fd1b64-f2df-4e55-8bbc-bf1138aefe7a",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Likes'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3804\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m3805\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_engine\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3806\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "\u001b[36mFile \u001b[39m\u001b[32mindex.pyx:167\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32mindex.pyx:196\u001b[39m, in \u001b[36mpandas._libs.index.IndexEngine.get_loc\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[39m, in \u001b[36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[31mKeyError\u001b[39m: 'Likes'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[8]\u001b[39m\u001b[32m, line 4\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mpyplot\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mplt\u001b[39;00m\n\u001b[32m      3\u001b[39m \u001b[38;5;66;03m# Group and count Likes\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m4\u001b[39m top_likes = \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mLikes\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m]\u001b[49m.value_counts().head(\u001b[32m10\u001b[39m)\n\u001b[32m      6\u001b[39m \u001b[38;5;66;03m# Plot\u001b[39;00m\n\u001b[32m      7\u001b[39m plt.figure(figsize=(\u001b[32m10\u001b[39m,\u001b[32m6\u001b[39m))\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pandas\\core\\frame.py:4102\u001b[39m, in \u001b[36mDataFrame.__getitem__\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   4100\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.columns.nlevels > \u001b[32m1\u001b[39m:\n\u001b[32m   4101\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._getitem_multilevel(key)\n\u001b[32m-> \u001b[39m\u001b[32m4102\u001b[39m indexer = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   4103\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[32m   4104\u001b[39m     indexer = [indexer]\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[39m, in \u001b[36mIndex.get_loc\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m   3807\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[32m   3808\u001b[39m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc.Iterable)\n\u001b[32m   3809\u001b[39m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[32m   3810\u001b[39m     ):\n\u001b[32m   3811\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[32m-> \u001b[39m\u001b[32m3812\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01merr\u001b[39;00m\n\u001b[32m   3813\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[32m   3814\u001b[39m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[32m   3815\u001b[39m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[32m   3816\u001b[39m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[32m   3817\u001b[39m     \u001b[38;5;28mself\u001b[39m._check_indexing_error(key)\n",
      "\u001b[31mKeyError\u001b[39m: 'Likes'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Group and count Likes\n",
    "top_likes = df['Likes'].value_counts().head(10)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "top_likes.plot(kind='bar', color='skyblue')\n",
    "plt.title('Top 10 Things Users Liked About Calm App')\n",
    "plt.xlabel('Likes')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.grid(axis='y')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db4f95d3-a67f-4e66-8ccb-4c6487a47d0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group and count Dislikes\n",
    "top_dislikes = df['Dislikes'].value_counts().head(10)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "top_dislikes.plot(kind='bar', color='salmon')\n",
    "plt.title('Top 10 Things Users Disliked About Calm App')\n",
    "plt.xlabel('Dislikes')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.grid(axis='y')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b847c6f-146d-42d1-b641-8d0e60817610",
   "metadata": {},
   "outputs": [],
   "source": [
    "from wordcloud import WordCloud\n",
    "\n",
    "# Combine all Likes into a single string\n",
    "likes_text = \" \".join(df['Likes'].dropna().astype(str))\n",
    "\n",
    "# Generate Word Cloud\n",
    "wordcloud_likes = WordCloud(width=800, height=400, background_color='white').generate(likes_text)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.imshow(wordcloud_likes, interpolation='bilinear')\n",
    "plt.axis('off')\n",
    "plt.title('Word Cloud of Likes')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2da73cf1-f7c2-485c-8d66-c7aec9ec7f3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combine all Dislikes into a single string\n",
    "dislikes_text = \" \".join(df['Dislikes'].dropna().astype(str))\n",
    "\n",
    "# Generate Word Cloud\n",
    "wordcloud_dislikes = WordCloud(width=800, height=400, background_color='white').generate(dislikes_text)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.imshow(wordcloud_dislikes, interpolation='bilinear')\n",
    "plt.axis('off')\n",
    "plt.title('Word Cloud of Dislikes')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
